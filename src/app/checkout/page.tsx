'use client'import { useState } from 'react'import { useRouter } from 'next/navigation'import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'import { Button } from '@/components/ui/button'import { Input } from '@/components/ui/input'import { Label } from '@/components/ui/label'import { useCart } from '@/contexts/CartContext'import { useAuth } from '@/contexts/AuthContext'import { formatPrice } from '@/lib/stripe'import { CreditCard, Lock, ShoppingBag } from 'lucide-react'export default function CheckoutPage() {  const { state, clearCart } = useCart()  const { user } = useAuth()  const router = useRouter()    const [loading, setLoading] = useState(false)  const [formData, setFormData] = useState({    email: user?.email || '',    firstName: '',    lastName: '',    address: '',    city: '',    state: '',    zipCode: '',    country: 'US'  })  const subtotal = state.items.reduce((sum, item) => sum + item.project.price, 0)  const shipping = 9.99  const tax = subtotal * 0.08 // 8% tax  const total = subtotal + shipping + tax  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {    setFormData({      ...formData,      [e.target.name]: e.target.value    })  }  const handleStripeCheckout = async () => {    setLoading(true)        try {      // Prepare items for Stripe      const stripeItems = state.items.map(item => ({        id: item.project.id,        name: item.project.name,        description: item.project.description,        price: item.project.price,        currency: 'usd',        metadata: {          category: item.project.category,          difficulty: item.project.difficulty,        }      }))      // Add shipping and tax      stripeItems.push(        {          id: 'shipping',          name: 'Shipping & Handling',          description: 'Standard shipping',          price: shipping,          currency: 'usd',          metadata: { category: 'shipping', difficulty: 'beginner' as const }        },        {          id: 'tax',          name: 'Tax',          description: 'Sales tax',          price: tax,          currency: 'usd',          metadata: { category: 'tax', difficulty: 'beginner' as const }        }      )      const response = await fetch('/api/stripe/create-checkout-session', {        method: 'POST',        headers: { 'Content-Type': 'application/json' },        body: JSON.stringify({          items: stripeItems,          successUrl: `${window.location.origin}/order-success?session_id={CHECKOUT_SESSION_ID}`,          cancelUrl: `${window.location.origin}/checkout`,          customerEmail: formData.email,        }),      })      const { url, error } = await response.json()      if (error) {        throw new Error(error)      }      if (url) {        window.location.href = url      }    } catch (error) {      console.error('Stripe checkout error:', error)      alert('Payment failed. Please try again.')    } finally {      setLoading(false)    }  }  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault()    await handleStripeCheckout()  }  if (state.items.length === 0) {    return (      <div className="min-h-screen bg-black flex items-center justify-center">        <div className="text-center">          <ShoppingBag className="h-24 w-24 text-gray-600 mx-auto mb-6" />          <h1 className="text-2xl font-bold text-white mb-4">Your cart is empty</h1>          <p className="text-gray-400 mb-8">Add some projects to your cart before checking out.</p>          <Button onClick={() => router.push('/projects')}>Browse Projects</Button>        </div>      </div>    )  }  return (    <div className="min-h-screen bg-black">      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">        <h1 className="text-3xl font-bold text-white mb-8">Checkout</h1>                <div className="grid lg:grid-cols-2 gap-12">          {/* Checkout Form */}          <div>            <form onSubmit={handleSubmit} className="space-y-6">              {/* Contact Information */}              <Card className="bg-gray-900/50 border-gray-700">                <CardHeader>                  <CardTitle className="text-white">Contact Information</CardTitle>                </CardHeader>                <CardContent>                  <div>                    <Label htmlFor="email" className="text-gray-200">Email</Label>                    <Input                      id="email"                      name="email"                      type="email"                      value={formData.email}                      onChange={handleInputChange}                      className="bg-gray-800/50 border-gray-600 text-white"                      required                      disabled={!!user}                    />                  </div>                </CardContent>              </Card>              {/* Shipping Information */}              <Card className="bg-gray-900/50 border-gray-700">                <CardHeader>                  <CardTitle className="text-white">Shipping Information</CardTitle>                </CardHeader>                <CardContent className="space-y-4">                  <div className="grid grid-cols-2 gap-4">                    <div>                      <Label htmlFor="firstName" className="text-gray-200">First Name</Label>                      <Input                        id="firstName"                        name="firstName"                        value={formData.firstName}                        onChange={handleInputChange}                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                    <div>                      <Label htmlFor="lastName" className="text-gray-200">Last Name</Label>                      <Input                        id="lastName"                        name="lastName"                        value={formData.lastName}                        onChange={handleInputChange}                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                  </div>                                    <div>                    <Label htmlFor="address" className="text-gray-200">Address</Label>                    <Input                      id="address"                      name="address"                      value={formData.address}                      onChange={handleInputChange}                      placeholder="123 Main St"                      className="bg-gray-800/50 border-gray-600 text-white"                      required                    />                  </div>                                    <div className="grid grid-cols-2 gap-4">                    <div>                      <Label htmlFor="city" className="text-gray-200">City</Label>                      <Input                        id="city"                        name="city"                        value={formData.city}                        onChange={handleInputChange}                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                    <div>                      <Label htmlFor="state" className="text-gray-200">State</Label>                      <Input                        id="state"                        name="state"                        value={formData.state}                        onChange={handleInputChange}                        placeholder="CA"                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                  </div>                                    <div className="grid grid-cols-2 gap-4">                    <div>                      <Label htmlFor="zipCode" className="text-gray-200">ZIP Code</Label>                      <Input                        id="zipCode"                        name="zipCode"                        value={formData.zipCode}                        onChange={handleInputChange}                        placeholder="12345"                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                    <div>                      <Label htmlFor="country" className="text-gray-200">Country</Label>                      <Input                        id="country"                        name="country"                        value={formData.country}                        onChange={handleInputChange}                        className="bg-gray-800/50 border-gray-600 text-white"                        required                      />                    </div>                  </div>                </CardContent>              </Card>              {/* Payment Method */}              <Card className="bg-gray-900/50 border-gray-700">                <CardHeader>                  <CardTitle className="text-white flex items-center">                    <Lock className="w-5 h-5 mr-2" />                    Payment Method                  </CardTitle>                </CardHeader>                <CardContent>                  <div className="p-3 border border-gray-600 rounded-lg">                    <div className="flex items-center space-x-3">                      <CreditCard className="w-5 h-5 text-blue-400" />                      <div>                        <div className="text-white font-medium">Stripe Checkout</div>                        <div className="text-gray-400 text-sm">Secure payment with card</div>                      </div>                    </div>                  </div>                  <div className="flex items-center text-sm text-gray-400 mt-3">                    <Lock className="w-4 h-4 mr-2" />                    Your payment information is secure and encrypted                  </div>                </CardContent>              </Card>              {/* Submit Button */}              <Button                type="submit"                className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-4 text-lg transition-all duration-200 transform hover:scale-[1.02]"                disabled={loading}              >                {loading ? (                  <div className="flex items-center justify-center space-x-2">                    <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>                    <span>Processing...</span>                  </div>                ) : (                  <>                    <CreditCard className="w-5 h-5 mr-2" />                    Pay {formatPrice(total)}                  </>                )}              </Button>            </form>          </div>          {/* Order Summary */}          <div>            <Card className="bg-gray-900/50 border-gray-700 sticky top-8">              <CardHeader>                <CardTitle className="text-white">Order Summary</CardTitle>              </CardHeader>              <CardContent className="space-y-4">                {/* Cart Items */}                <div className="space-y-3">                  {state.items.map((item) => (                    <div key={item.project.id} className="flex items-center space-x-3 py-3 border-b border-gray-700 last:border-b-0">                      <div className="w-16 h-16 bg-gray-800 rounded-lg flex-shrink-0"></div>                      <div className="flex-1 min-w-0">                        <h3 className="text-white font-medium truncate">                          {item.project.name}                        </h3>                        <p className="text-gray-400 text-sm">                          {item.project.category} • {item.project.difficulty}                        </p>                      </div>                      <div className="text-white font-medium">                        {formatPrice(item.project.price)}                      </div>                    </div>                  ))}                </div>                {/* Order Totals */}                <div className="space-y-2 pt-4 border-t border-gray-700">                  <div className="flex justify-between text-gray-300">                    <span>Subtotal</span>                    <span>{formatPrice(subtotal)}</span>                  </div>                  <div className="flex justify-between text-gray-300">                    <span>Shipping</span>                    <span>{formatPrice(shipping)}</span>                  </div>                  <div className="flex justify-between text-gray-300">                    <span>Tax</span>                    <span>{formatPrice(tax)}</span>                  </div>                  <div className="flex justify-between text-white font-semibold text-lg pt-2 border-t border-gray-700">                    <span>Total</span>                    <span>{formatPrice(total)}</span>                  </div>                </div>                {/* Security Badge */}                <div className="bg-gray-800/50 p-3 rounded-lg border border-gray-600">                  <div className="flex items-center text-green-400 text-sm">                    <Lock className="w-4 h-4 mr-2" />                    <span>256-bit SSL encryption</span>                  </div>                  <div className="text-gray-400 text-xs mt-1">                    Your payment is processed securely by Stripe                  </div>                </div>              </CardContent>            </Card>          </div>        </div>      </div>    </div>  )}